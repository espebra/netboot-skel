install
network --bootproto dhcp --device eth0 --onboot yes --ipv6=auto

lang en_US

keyboard no
skipx
text
rootpw foobar

url --url="http://ftp.scientificlinux.org/linux/scientific/6rolling/x86_64/os/"
repo --name=sl --baseurl="http://ftp.scientificlinux.org/linux/scientific/6rolling/x86_64/os/"
repo --name=sl-security --baseurl="http://ftp.scientificlinux.org/linux/scientific/6rolling/x86_64/updates/security/"
repo --name=sl-fastbugs --baseurl="http://ftp.scientificlinux.org/linux/scientific/6rolling/x86_64/updates/fastbugs/"
repo --name="epel" --baseurl="http://dl.fedoraproject.org/pub/epel/6/x86_64/"
repo --name="zfs" --baseurl="http://archive.zfsonlinux.org/epel/6/$basearch/"

firewall --disabled
selinux --disabled
authconfig --enableshadow --enablemd5
timezone --utc Europe/Oslo
bootloader --location=mbr 
services --disabled mdmonitor,lvm2-monitor,netfs
zerombr
reboot

clearpart --all
part / --fstype=ext4 --size=3072

%packages
@core
@base
patch
redhat-lsb
wget
git
ansible
shadow-utils

zfs
%end

%post

# To ensure that the password set in this kickstart file is not available 
# during boot before rc.local has been executed.
/usr/sbin/usermod -L root

cat >> /etc/rc.local << EOF

root_crypt=\$(sed -rn -e 's/.* ?root_crypt=([^[:space:]]+).*/\1/p' /proc/cmdline)

# Set root password
if [ -z \${root_crypt} ]
then
    echo "WARNING: Crypted root not set."
else
    usermod -p "\${root_crypt}" root
    usermod -U root
fi

# Import available zpools
if [ -x /sbin/zpool ]; then
  for pool in \$(/sbin/zpool import | grep " pool: "  | awk '{print \$2}'); do
    /sbin/zpool import -f \$pool
    if [ \$? -eq 0 ]; then
      echo "Zpool \$pool was imported successfully."
    else
      echo "Failed to import zpool \$pool."
    fi
  done
fi

/bin/mkdir /local

# Parse boot parameters related to ansible
repository=\$(sed -rn -e 's/.* ?repository=([^[:space:]]+).*/\1/p' /proc/cmdline)
branch=\$(sed -rn -e 's/.* ?branch=([^[:space:]]+).*/\1/p' /proc/cmdline)
inventory=\$(sed -rn -e 's/.* ?inventory=([^[:space:]]+).*/\1/p' /proc/cmdline)
playbook=\$(sed -rn -e 's/.* ?playbook=([^[:space:]]+).*/\1/p' /proc/cmdline)

if [ -z \${branch} ]; then
    echo "WARNING: branch not set. Using default."
    branch="master"
fi
echo "Branch: \$branch"

if [ -z \${inventory} ]; then
    echo "WARNING: inventory not set. Using default."
    inventory="hosts"
fi
echo "Inventory: \$inventory"

if [ -z \${playbook} ]; then
    echo "WARNING: playbook not set. Using default."
    playbook="common"
fi
echo "Playbook: \$playbook"

if [ -z \${repository} ]; then
    echo "WARNING: repository not set. Cannot continue."
else
    echo "Repository: \$repository"
    mkdir -p /var/log/ansible

    # Workaround since missing inventory file breaks ansible-playbook
    git clone \${repository} /opt/ansible
    /usr/bin/ansible-pull --module-name=git --url="\${repository}" --checkout="\${branch}" --inventory-file="/opt/ansible/\${inventory}" --directory=/opt/ansible "\${playbook}.yml" >> /var/log/ansible/ansible-pull.log 2>&1

    #/usr/bin/ansible-pull --module-name=git --only-if-changed --url="\${repository}" --checkout="\${branch}" --inventory-file="/opt/ansible/\${inventory}" --directory=/opt/ansible "\${playbook}.yml" >> /var/log/ansible/ansible-pull.log 2>&1
fi

# Make sure to share all volumes that should be shared at boot
if [ -x /sbin/zfs ]; then
    /sbin/zfs share -a
fi

# Mount any local ext4 file systems
for dev in \$(ls /sys/block); do
    case \$dev in
        vd?|sd?)
            if [ "\$(blkid -o value -s TYPE /dev/\$dev)" == "ext4" ]; then
                mkdir -p /local/\$dev
                mount /dev/\$dev /local/\$dev
            fi
        ;;
    esac
done
EOF

# netfs will try to umount loop devices early in the shutdown process. To avoid
# error messages to the console during shutdown, we simply remove the line
# that initiates the loop umount.
/bin/sed -i '/__umount_loopback_loop/d' /etc/init.d/netfs

cat > /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6 << EOF
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.5 (GNU/Linux)

mQINBEvSKUIBEADLGnUj24ZVKW7liFN/JA5CgtzlNnKs7sBg7fVbNWryiE3URbn1
JXvrdwHtkKyY96/ifZ1Ld3lE2gOF61bGZ2CWwJNee76Sp9Z+isP8RQXbG5jwj/4B
M9HK7phktqFVJ8VbY2jfTjcfxRvGM8YBwXF8hx0CDZURAjvf1xRSQJ7iAo58qcHn
XtxOAvQmAbR9z6Q/h/D+Y/PhoIJp1OV4VNHCbCs9M7HUVBpgC53PDcTUQuwcgeY6
pQgo9eT1eLNSZVrJ5Bctivl1UcD6P6CIGkkeT2gNhqindRPngUXGXW7Qzoefe+fV
QqJSm7Tq2q9oqVZ46J964waCRItRySpuW5dxZO34WM6wsw2BP2MlACbH4l3luqtp
Xo3Bvfnk+HAFH3HcMuwdaulxv7zYKXCfNoSfgrpEfo2Ex4Im/I3WdtwME/Gbnwdq
3VJzgAxLVFhczDHwNkjmIdPAlNJ9/ixRjip4dgZtW8VcBCrNoL+LhDrIfjvnLdRu
vBHy9P3sCF7FZycaHlMWP6RiLtHnEMGcbZ8QpQHi2dReU1wyr9QgguGU+jqSXYar
1yEcsdRGasppNIZ8+Qawbm/a4doT10TEtPArhSoHlwbvqTDYjtfV92lC/2iwgO6g
YgG9XrO4V8dV39Ffm7oLFfvTbg5mv4Q/E6AWo/gkjmtxkculbyAvjFtYAQARAQAB
tCFFUEVMICg2KSA8ZXBlbEBmZWRvcmFwcm9qZWN0Lm9yZz6JAjYEEwECACAFAkvS
KUICGw8GCwkIBwMCBBUCCAMEFgIDAQIeAQIXgAAKCRA7Sd8qBgi4lR/GD/wLGPv9
qO39eyb9NlrwfKdUEo1tHxKdrhNz+XYrO4yVDTBZRPSuvL2yaoeSIhQOKhNPfEgT
9mdsbsgcfmoHxmGVcn+lbheWsSvcgrXuz0gLt8TGGKGGROAoLXpuUsb1HNtKEOwP
Q4z1uQ2nOz5hLRyDOV0I2LwYV8BjGIjBKUMFEUxFTsL7XOZkrAg/WbTH2PW3hrfS
WtcRA7EYonI3B80d39ffws7SmyKbS5PmZjqOPuTvV2F0tMhKIhncBwoojWZPExft
HpKhzKVh8fdDO/3P1y1Fk3Cin8UbCO9MWMFNR27fVzCANlEPljsHA+3Ez4F7uboF
p0OOEov4Yyi4BEbgqZnthTG4ub9nyiupIZ3ckPHr3nVcDUGcL6lQD/nkmNVIeLYP
x1uHPOSlWfuojAYgzRH6LL7Idg4FHHBA0to7FW8dQXFIOyNiJFAOT2j8P5+tVdq8
wB0PDSH8yRpn4HdJ9RYquau4OkjluxOWf0uRaS//SUcCZh+1/KBEOmcvBHYRZA5J
l/nakCgxGb2paQOzqqpOcHKvlyLuzO5uybMXaipLExTGJXBlXrbbASfXa/yGYSAG
iVrGz9CE6676dMlm8F+s3XXE13QZrXmjloc6jwOljnfAkjTGXjiB7OULESed96MR
XtfLk0W5Ab9pd7tKDR6QHI7rgHXfCopRnZ2VVQ==
=V/6I
-----END PGP PUBLIC KEY BLOCK-----
EOF

## Import the gpg key for the SL 6 repositories
/bin/rpm --import 'file:///etc/pki/rpm-gpg/RPM-GPG-KEY-sl'
/bin/rpm --import 'file:///etc/pki/rpm-gpg/RPM-GPG-KEY-sl6'
/bin/rpm --import 'file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6'

# Bridge
cat > /etc/sysconfig/network-scripts/ifcfg-br0 << END
DEVICE=br0 
ONBOOT=yes
TYPE=Bridge
DELAY=0
BOOTPROTO=dhcp 
PERSISTENT_DHCLIENT=yes
END

cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << END
DEVICE=eth0 
ONBOOT=yes 
BRIDGE=br0
END

cat > /etc/dhcp/dhclient.conf << END
send dhcp-lease-time 604800;
END

# Hold kernel upgrades
cat >> /etc/yum.conf << END
exclude=kernel*
END

#
# Everything below here is related to the ramdisk hosting the root filesystem
#

# Copy the entire root filesystem to ram at boot time to avoid the overlay.
echo "Backup /etc/fstab"
cp /etc/fstab /root/fstab.backup

echo "Update /etc/fstab"
cat > /etc/fstab << EOF
tmpfs      /         tmpfs   defaults,noatime 0 0
devpts     /dev/pts  devpts  gid=5,mode=620   0 0
tmpfs      /dev/shm  tmpfs   defaults         0 0
proc       /proc     proc    defaults         0 0
sysfs      /sys      sysfs   defaults         0 0
EOF

# For debugging: Show the changes during the build process.
diff -u /root/fstab.backup /etc/fstab

echo "Backup dmsquash-live-root"
cp /usr/share/dracut/modules.d/90dmsquash-live/dmsquash-live-root /root/dmsquash-live-root.backup

# Add support for the toram kernel parameter in dmsquash-live-root
echo "Patching dmsquash-live-root"

# Using base64 to avoid fuzz with variables being used in %post directly. It
# seems easier than manual escaping.
cat > /root/dmsquash-live-root.patch.base64 << EOF
LS0tIG9yaWdpbmFsCTIwMTMtMDMtMjAgMTY6MjU6MjMuNjk4ODQ2NTgxICswMTAwCisrKyBuZXcJ
MjAxMy0wMy0yMSAwODo1ODoxMS4xNzUzMzk2OTQgKzAxMDAKQEAgLTI0LDYgKzI0LDggQEAKIGdl
dGFyZyByZWFkb25seV9vdmVybGF5ICYmIHJlYWRvbmx5X292ZXJsYXk9Ii0tcmVhZG9ubHkiIHx8
IHJlYWRvbmx5X292ZXJsYXk9IiIKIG92ZXJsYXk9JChnZXRhcmcgb3ZlcmxheSkKIAorZ2V0YXJn
IHRvcmFtICYmIHRvcmFtPSJ5ZXMiCisKICMgRklYTUU6IHdlIG5lZWQgdG8gYmUgYWJsZSB0byBo
aWRlIHRoZSBwbHltb3V0aCBzcGxhc2ggZm9yIHRoZSBjaGVjayByZWFsbHkKIFsgLWUgJGxpdmVk
ZXYgXSAmIGZzPSQoYmxraWQgLXMgVFlQRSAtbyB2YWx1ZSAkbGl2ZWRldikKIGlmIFsgIiRmcyIg
PSAiaXNvOTY2MCIgLW8gIiRmcyIgPSAidWRmIiBdOyB0aGVuCkBAIC0xMzIsNyArMTM0LDEwIEBA
CiAgICAgQkFTRV9MT09QREVWPSQoIGxvc2V0dXAgLWYgKQogICAgIGxvc2V0dXAgLXIgJEJBU0Vf
TE9PUERFViAkRVhUM0ZTCiAKLSAgICBkb19saXZlX2Zyb21fYmFzZV9sb29wCisgICAgIyBDcmVh
dGUgb3ZlcmxheSBvbmx5IGlmIHRvcmFtIGlzIG5vdCBzZXQKKyAgICBpZiBbIC16ICIkdG9yYW0i
IF0gOyB0aGVuCisgICAgICAgIGRvX2xpdmVfZnJvbV9iYXNlX2xvb3AKKyAgICBmaQogZmkKIAog
IyB3ZSBtaWdodCBoYXZlIGFuIGVtYmVkZGVkIGV4dDMgb24gc3F1YXNoZnMgdG8gdXNlIGFzIHJv
b3RmcyAoY29tcHJlc3NlZCBsaXZlKQpAQCAtMTYzLDEzICsxNjgsNjYgQEAKIAogICAgIHVtb3Vu
dCAtbCAvc3F1YXNoZnMKIAotICAgIGRvX2xpdmVfZnJvbV9iYXNlX2xvb3AKKyAgICAjIENyZWF0
ZSBvdmVybGF5IG9ubHkgaWYgdG9yYW0gaXMgbm90IHNldAorICAgIGlmIFsgLXogIiR0b3JhbSIg
XSA7IHRoZW4KKyAgICAgICAgZG9fbGl2ZV9mcm9tX2Jhc2VfbG9vcAorICAgIGZpCitmaQorCisj
IElmIHRoZSBrZXJuZWwgcGFyYW1ldGVyIHRvcmFtIGlzIHNldCwgY3JlYXRlIGEgdG1wZnMgZGV2
aWNlIGFuZCBjb3B5IHRoZSAKKyMgZmlsZXN5c3RlbSB0byBpdC4gQ29udGludWUgdGhlIGJvb3Qg
cHJvY2VzcyB3aXRoIHRoaXMgdG1wZnMgZGV2aWNlIGFzCisjIGEgd3JpdGFibGUgcm9vdCBkZXZp
Y2UuCitpZiBbIC1uICIkdG9yYW0iIF0gOyB0aGVuCisgICAgYmxvY2tzPSQoIGJsb2NrZGV2IC0t
Z2V0c3ogJEJBU0VfTE9PUERFViApCisKKyAgICBlY2hvICJDcmVhdGUgdG1wZnMgKCRibG9ja3Mg
YmxvY2tzKSBmb3IgdGhlIHJvb3QgZmlsZXN5c3RlbS4uLiIKKyAgICBta2RpciAtcCAvaW1hZ2UK
KyAgICBtb3VudCAtbiAtdCB0bXBmcyAtbyBucl9ibG9ja3M9JGJsb2NrcyB0bXBmcyAvaW1hZ2UK
KworICAgIGVjaG8gIkNvcHkgZmlsZXN5c3RlbSBpbWFnZSB0byB0bXBmcy4uLiAodGhpcyBtYXkg
dGFrZSBhIGZldyBtaW51dGVzKSIKKyAgICBkZCBpZj0kQkFTRV9MT09QREVWIG9mPS9pbWFnZS9y
b290ZnMuaW1nCisKKyAgICBST09URlNfTE9PUERFVj0kKCBsb3NldHVwIC1mICkKKyAgICBlY2hv
ICJDcmVhdGUgbG9vcCBkZXZpY2UgZm9yIHRoZSByb290IGZpbGVzeXN0ZW06ICRST09URlNfTE9P
UERFViIKKyAgICBsb3NldHVwICRST09URlNfTE9PUERFViAvaW1hZ2Uvcm9vdGZzLmltZworCisg
ICAgZWNobyAiSXQncyB0aW1lIHRvIGNsZWFuIHVwLi4gIgorCisgICAgZWNobyAiID4gVW1vdW50
aW5nIGltYWdlcyIKKyAgICB1bW91bnQgLWwgL2ltYWdlCisgICAgdW1vdW50IC1sIC9kZXYvLmlu
aXRyYW1mcy9saXZlCisKKyAgICBlY2hvICIgPiBEZXRhY2ggJE9TTUlOX0xPT1BERVYiCisgICAg
bG9zZXR1cCAtZCAkT1NNSU5fTE9PUERFVgorCisgICAgZWNobyAiID4gRGV0YWNoICRPU01JTl9T
UVVBU0hFRF9MT09QREVWIgorICAgIGxvc2V0dXAgLWQgJE9TTUlOX1NRVUFTSEVEX0xPT1BERVYK
KyAgICAKKyAgICBlY2hvICIgPiBEZXRhY2ggJEJBU0VfTE9PUERFViIKKyAgICBsb3NldHVwIC1k
ICRCQVNFX0xPT1BERVYKKyAgICAKKyAgICBlY2hvICIgPiBEZXRhY2ggJFNRVUFTSEVEX0xPT1BE
RVYiCisgICAgbG9zZXR1cCAtZCAkU1FVQVNIRURfTE9PUERFVgorICAgIAorICAgIGVjaG8gIiA+
IERldGFjaCAvZGV2L2xvb3AwIgorICAgIGxvc2V0dXAgLWQgL2Rldi9sb29wMAorCisgICAgbG9z
ZXR1cCAtYQorCisgICAgZWNobyAiUm9vdCBmaWxlc3lzdGVtIGlzIG5vdyBvbiAkUk9PVEZTX0xP
T1BERVYuIgorICAgIGVjaG8KKworICAgIGxuIC1zICRST09URlNfTE9PUERFViAvZGV2L3Jvb3QK
KyAgICBwcmludGYgJy9iaW4vbW91bnQgLW8gcncgJXMgJXNcbicgIiRST09URlNfTE9PUERFViIg
IiRORVdST09UIiA+IC9tb3VudC8wMS0kJC1saXZlLnNoCisgICAgZXhpdCAwCiBmaQogCiBpZiBb
IC1iICIkT1NNSU5fTE9PUERFViIgXTsgdGhlbgogICAgICMgc2V0IHVwIHRoZSBkZXZpY2VtYXBw
ZXIgc25hcHNob3QgZGV2aWNlLCB3aGljaCB3aWxsIG1lcmdlCiAgICAgIyB0aGUgbm9ybWFsIGxp
dmUgZnMgaW1hZ2UsIGFuZCB0aGUgZGVsdGEsIGludG8gYSBtaW5pbXppZWQgZnMgaW1hZ2UKLSAg
ICBlY2hvICIwICQoIGJsb2NrZGV2IC0tZ2V0c3ogJEJBU0VfTE9PUERFViApIHNuYXBzaG90ICRC
QVNFX0xPT1BERVYgJE9TTUlOX0xPT1BERVYgcCA4IiB8IGRtc2V0dXAgY3JlYXRlIC0tcmVhZG9u
bHkgbGl2ZS1vc2ltZy1taW4KKyAgICBpZiBbIC16ICIkdG9yYW0iIF0gOyB0aGVuCisgICAgICAg
IGVjaG8gIjAgJCggYmxvY2tkZXYgLS1nZXRzeiAkQkFTRV9MT09QREVWICkgc25hcHNob3QgJEJB
U0VfTE9PUERFViAkT1NNSU5fTE9PUERFViBwIDgiIHwgZG1zZXR1cCBjcmVhdGUgLS1yZWFkb25s
eSBsaXZlLW9zaW1nLW1pbgorICAgIGZpCiBmaQogCiBST09URkxBR1M9IiQoZ2V0YXJnIHJvb3Rm
bGFncykiCg==
EOF

cat /root/dmsquash-live-root.patch.base64 | base64 -d > /root/dmsquash-live-root.patch 

patch /usr/share/dracut/modules.d/90dmsquash-live/dmsquash-live-root /root/dmsquash-live-root.patch 

# For debugging: Show the changes during the build process.
diff -u /root/dmsquash-live-root.backup /usr/share/dracut/modules.d/90dmsquash-live/dmsquash-live-root

rm -rf /usr/share/dracut/modules.d/90crypt

# This initramfs will be in /boot/ in the filesystem image. Will need to move
# or copy it from the image and into the isolinux directory. See the nochroot
# section below.
echo "Generate new initramfs image(s):"
ls /lib/modules | while read kernel; do
  echo " > Update initramfs for kernel ${kernel}"
  initrdfile="/boot/initramfs-${kernel}.img"

  /sbin/dracut -f $initrdfile $kernel
done

# Here we can probably remove the kernel package and /boot to free some disk
# space. The kernel that is being used is served separately at boot anyway.
%end

# We need to replace the old initrd with our new and updated one that
# supports toram. To do this, we must run %post without chroot and then 
# use the variables $INSTALL_ROOT and $LIVE_ROOT, and then copy the initrd 
# to the isolinux directory.
%post --nochroot
echo "Copy initramfs outside the chroot:"
ls $INSTALL_ROOT/lib/modules | while read kernel; do
  src="$INSTALL_ROOT/boot/initramfs-${kernel}.img"
  dst="$LIVE_ROOT/isolinux/initrd0.img"
  echo " > $src -> $dst"
  cp -f $src $dst
done
%end

